# Configuration for Alacritty, the GPU enhanced terminal emulator.

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty itself.
#env:
  # TERM variable
  #
  # This value is used to set the `$TERM` environment variable for
  # each instance of Alacritty. If it is not present, alacritty will
  # check the local terminfo database and use 'alacritty' if it is
  # available, otherwise 'xterm-256color' is used.
  #TERM: xterm-256color

window:
  # Window dimensions (changes require restart)
  #
  # Specified in number of columns/lines, not pixels.
  # If both are `0`, this setting is ignored.
  dimensions:
    columns: 115
    lines: 46

  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is scaled
  # by DPI and the specified value is always added at both opposing sides.
  padding:
    x: 0
    y: 0

  # Window decorations
  #
  # Available values:
  # - `full`: Window with title bar and title bar buttons
  # - `none`: Window without title bar, rounded corners, or drop shadow
  # - `transparent`: Window with title bar with transparent background and title
  #   bar buttons
  # - `buttonless`: Window with title bar with transparent background and no
  #   title bar buttons
  # Window decorations
  #
  # Values for `decorations`:
  #     - full: Borders and title bar
  #     - none: Neither borders nor title bar
  #     - buttonless: Title bar, transparent background and title bar buttons
  #     - transparent: Title bar, transparent background, but no title bar buttons
  decorations: full

scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 10000

  # Number of lines the viewport will move for every line scrolled when
  # scrollback is enabled (history > 0).
  multiplier: 3

  # Faux Scrolling
  #
  # The `faux_multiplier` setting controls the number of lines the terminal
  # should scroll when the alternate screen buffer is active. This is used
  # to allow mouse scrolling for applications like `man`.
  #
  # Specifying `0` will disable faux scrolling.
  # faux_multiplier: 3

  # Scroll to the bottom when new text is written to the terminal.
  # auto_scroll: false

# Spaces per Tab (changes require restart)
#
# This setting defines the width of a tab in cells.
#
# Some applications, like Emacs, rely on knowing about the width of a tab.
# To prevent unexpected behavior in these applications, it's also required to
# change the `it` value in terminfo when altering this setting.
# tabspaces: 2

# Font configuration (changes require restart)
font:
  normal:
    family: JetBrains Mono NL
    style: Regular

  bold:
    family: JetBrains Mono NL
    style: Bold

  italic:
    family: JetBrains Mono NL
    style: Italic

  # Otra también interesante puede ser Plex de IBM. También, JetBrains Mono. O,
  # si no, simplemente, Monospace.


  # Point size
  size: 13.0

  # Offset is the extra space around each character. `offset.y` can be thought of
  # as modifying the line spacing, and `offset.x` as modifying the letter spacing.
  offset:
    x: 0
    y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increasing `x` moves the glyph to the right,
  # increasing `y` moves the glyph upwards.
  glyph_offset:
    x: 0
    y: 0

  # Thin stroke font rendering (OS X only)
  #
  # Thin strokes are suitable for retina displays, but for non-retina screens
  # it is recommended to set `use_thin_strokes` to `false`
  use_thin_strokes: true

# Display the time it takes to redraw each frame.
debug.render_timer: false

# If `true`, bold text is drawn using the bright color variants.
draw_bold_text_with_bright_colors: false

schemes:

  abyss_dark: &abyss_dark
    primary:
      background: '0x000c18'
      foreground: '0xa1acc4'
    normal:
      black: '0x263042'
      red: '0x874148'
      green: '0x456140'
      yellow: '0x805042'
      blue: '0x3f5d96'
      magenta: '0x664d61'
      cyan: '0x416b6b'
      white: '0x849cb7'
    bright:
      black: '0x263042'
      red: '0x96474f'
      green: '0x477d3c'
      yellow: '0x8a873d'
      blue: '0x6984b5'
      magenta: '0xd1a3c7'
      cyan: '0xa7bdd6'
      white: '0xccd5e8'

  nord_light: &nord_light
    primary:
      background: '0xd8dee9'
      foreground: '0x4c566a'
    normal:
      black: '0x4c566a'
      red: '0xbf616a'
      green: '0x7c916a'
      yellow: '0xc7ab73'
      blue: '0x537094'
      magenta: '0x997693'
      cyan: '0x5f92a3'
      white: '0xccd0d9'
    bright:
      black: '0x62759c'
      red: '0xbf616a'
      green: '0x7c916a'
      yellow: '0xebcb8b'
      blue: '0x89add9'
      magenta: '0xb48ead'
      cyan: '0x8cc0d0'
      white: '0xd8dee9'


  atelier_plateau_light: &atelier_plateau_light
    primary:
      background: '0xf4ecec'
      foreground: '0x585050'
    normal:
      black: '0xf4ecec'
      red: '0xca4949'
      green: '0x4b8b8b'
      yellow: '0xa06e3b'
      blue: '0x7272ca'
      magenta: '0x8464c4'
      cyan: '0x5485b6'
      white: '0x585050'
    bright:
      black: '0x7e7777'
      red: '0xb45a3c'
      green: '0xe7dfdf'
      yellow: '0x8a8585'
      blue: '0x655d5d'
      magenta: '0x292424'
      cyan: '0xbd5187'
      white: '0x1b1818'

  substrata: &substrata
    primary:
      background: '0x191c25'
      foreground: '0xb5b4c9'
    normal:
      black: '0x2e313d'
      red: '0xcf8164'
      green: '0x76a065'
      yellow: '0xab924c'
      blue: '0x8296b0'
      magenta: '0xa18daf'
      cyan: '0x659ea2'
      white: '0xb5b4c9'
    bright:
      black: '0x5b5f71'
      red: '0xfe9f7c'
      green: '0x92c47e'
      yellow: '0xd2b45f'
      blue: '0xa0b9d8'
      magenta: '0xc6aed7'
      cyan: '0x7dc2c7'
      white: '0xf0ecfe'

  substrata_darker: &substrata_darker
    primary:
      background: '0x000c18'
      foreground: '0x878796'
    normal:
      black: '0x08080a'
      red: '0x9c604b'
      green: '0x516e45'
      yellow: '0x786635'
      blue: '0x5c6a7d'
      magenta: '0x73657d'
      cyan: '0x466e70'
      white: '0x878796'
    bright:
      black: '0x32333d'
      red: '0xcc8164'
      green: '0x6c915d'
      yellow: '0x9e8647'
      blue: '0x7b8fa6'
      magenta: '0x9684a3'
      cyan: '0x5d8f94'
      white: '0xc0becc'

  # SKEL: &SKEL
  #   primary:
  #     background: '0x'
  #     foreground: '0x'
  #   normal:
  #     black: '0x'
  #     red: '0x'
  #     green: '0x'
  #     yellow: '0x'
  #     blue: '0x'
  #     magenta: '0x'
  #     cyan: '0x'
  #     white: '0x'
  #   bright:
  #     black: '0x'
  #     red: '0x'
  #     green: '0x'
  #     yellow: '0x'
  #     blue: '0x'
  #     magenta: '0x'
  #     cyan: '0x'
  #     white: '0x'

# colors: *substrata_darker



# Visual Bell
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Values for `animation`:
#   - Ease
#   - EaseOut
#   - EaseOutSine
#   - EaseOutQuad
#   - EaseOutCubic
#   - EaseOutQuart
#   - EaseOutQuint
#   - EaseOutExpo
#   - EaseOutCirc
#   - Linear
#
# Specifying a `duration` of `0` will disable the visual bell.
bell:
  animation: EaseOutExpo
  duration: 0

# Background opacity
#
# Window opacity as a floating point number from `0.0` to `1.0`.
# The value `0.0` is completely transparent and `1.0` is opaque.
window.opacity: 1.0

# Mouse bindings
#
# Available fields:
# - mouse
# - action
# - mods (optional)
#
# Values for `mouse`:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# All available `mods` and `action` values are documented in the key binding
# section.
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: false

  hints:
    # URL launcher
    #
    # This program is executed when clicking on a text which is recognized as a URL.
    # The URL is always added to the command as the last parameter.
    launcher: open

    # URL modifiers
    #
    # These are the modifiers that need to be held down for opening URLs when clicking
    # on them. The available modifiers are documented in the key binding section.
    #modifiers: Control|Shift

selection:
  semantic_escape_chars: ",│`|:\"' ()[]{}<>"

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: false

cursor:
  # Cursor style
  #
  # Values for 'style':
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam
  style: Block

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  unfocused_hollow: true

# Live config reload (changes require restart)
live_config_reload: true

# Shell
#
# You can set `shell.program` to the path of your favorite shell, e.g. `/bin/fish`.
# Entries in `shell.args` are passed unmodified as arguments to the shell.
shell:
  program: /bin/zsh
  args:
    - --login

## Key bindings
##
## Key bindings are specified as a list of objects. Each binding will specify
## a key and modifiers required to trigger it, terminal modes where the binding
## is applicable, and what should be done when the key binding fires. It can
## either send a byte sequnce to the running application (`chars`), execute
## a predefined action (`action`) or fork and execute a specified command plus
## arguments (`command`).
##
## Example:
##   `- { key: V, mods: Command, action: Paste }`
##
## Available fields:
##   - key
##   - mods (optional)
##   - chars | action | command (exactly one required)
##   - mode (optional)
##
## Values for `key`:
##   - `A` -> `Z`
##   - `F1` -> `F12`
##   - `Key1` -> `Key0`
##
##   A full list with available key codes can be found here:
##   https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
##
##   Instead of using the name of the keys, the `key` field also supports using
##   the scancode of the desired key. Scancodes have to be specified as a
##   decimal number.
##   This command will allow you to display the hex scancodes for certain keys:
##     `showkey --scancodes`
##
## Values for `mods`:
##   - Command
##   - Control
##   - Shift
##   - Alt
##
##   Multiple `mods` can be combined using `|` like this: `mods: Control|Shift`.
##   Whitespace and capitalization is relevant and must match the example.
##
## Values for `chars`:
##   The `chars` field writes the specified string to the terminal. This makes
##   it possible to pass escape sequences.
##   To find escape codes for bindings like `PageUp` ("\x1b[5~"), you can run
##   the command `showkey -a` outside of tmux.
##   Note that applications use terminfo to map escape sequences back to
##   keys. It is therefore required to update the terminfo when
##   changing an escape sequence.
##
## Values for `action`:
##   - Paste
##   - PasteSelection
##   - Copy
##   - IncreaseFontSize
##   - DecreaseFontSize
##   - ResetFontSize
##   - ScrollPageUp
##   - ScrollPageDown
##   - ScrollToTop
##   - ScrollToBottom
##   - ClearHistory
##   - Hide
##   - Quit
##
## Values for `command`:
##   The `command` field must be a map containing a `program` string and
##   an `args` array of command line parameter strings.
##
##   Example:
##       `command: { program: "alacritty", args: ["-e", "vttest"] }`
##
## Values for `mode`:
##   - ~AppCursor
##   - AppCursor
##   - ~AppKeypad
##   - AppKeypad


key_bindings:
  # Ajustes para teclado macOS español/spanish de España con disposición
  # ("layout") ISO (no ANSI; tecla Intro grande).
  - { key: 10,        mods: Alt,    chars: "\x5c" } # barra invertida `\`
  - { key: 18,        mods: Alt,    chars: "\x7c" } # barra vertical `|`
  - { key: Key2,      mods: Alt,    chars: "@" } # arroba `@`
  - { key: Key3,      mods: Alt,    chars: "#" } # almohadilla/cardinalidad `#`
  - { key: Key6,      mods: Alt,    chars: "¬" } # negación en lógica `¬`
  - { key: 39,        mods: Alt,    chars: "{" } # abre llaves `{`
  - { key: 42,        mods: Alt,    chars: "}" } # cierra llaves `}`
  - { key: 33,        mods: Alt,    chars: "[" } # abre corchetes `[`
  - { key: 30,        mods: Alt,    chars: "]" } # cierra corchetes `]`



